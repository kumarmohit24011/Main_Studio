rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      // Check if the user document exists before trying to access its data
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /products/{productId} {
      allow read: if true;
      // Admins can create and delete products
      allow create, delete: if isAdmin();

      // For updates, admins can change anything.
      // Signed-in users can only update the 'stock' field to a lower, non-negative value.
      // This allows the createOrder transaction to update stock.
      allow update: if isAdmin() || 
                      (isSignedIn() && 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']) &&
                       request.resource.data.stock < resource.data.stock &&
                       request.resource.data.stock >= 0);
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /siteContent/{contentId} {
      allow read: if true;
      allow write: if isAdmin();
      
      // Allow public read access to the shipping subcollection
      match /shipping/{shippingId} {
          allow read: if true;
          allow write: if isAdmin();
      }
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      allow create: if isOwner(userId) && 
                      (request.resource.data.get('isAdmin', false) == false || 
                      (request.resource.data.isAdmin == true && request.auth.token.email in ['admin@redbow.com']));
      
      allow update: if isOwner(userId) && 
                      // Prevent users from changing their admin status
                      request.resource.data.isAdmin == resource.data.isAdmin &&
                      // Only allow whitelisted fields to be changed
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                        'name', 'displayName', 'phone', 'addresses', 'photoURL', 
                        'wishlist', 'cart', 'updatedAt'
                      ]);
      
      allow delete: if isAdmin();
      // Admins should be able to write any field
      allow write: if isAdmin();
    }

    match /orders/{orderId} {
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && 
                      resource.data.userId == request.auth.uid &&
                      resource.data.orderStatus == 'pending' &&
                      request.resource.data.orderStatus == 'cancelled' &&
                      request.resource.data.diff(resource.data).changedKeys().hasOnly(['orderStatus', 'updatedAt']);
      allow read, write: if isAdmin();
    }

    match /coupons/{couponId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /subscribers/{subscriberId} {
      allow get: if true;
      allow list: if isAdmin();
      allow create: if true;
      allow update, delete: if isAdmin();
    }

    match /carts/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }

    match /wishlists/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }

    match /addresses/{addressId} {
      allow read, write: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if isAdmin();
    }

    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasOnly([
                        'rating', 'comment', 'updatedAt', 'userId', 'productId', 'orderId'
                      ]);
      allow read, write: if isAdmin();
    }

    match /analytics/{analyticsId} {
      allow read, write: if isAdmin();
    }

    match /payments/{paymentId} {
      allow read, write: if isAdmin();
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    match /inventory/{inventoryId} {
      allow read, write: if isAdmin();
    }

    match /admin_logs/{logId} {
      allow read, write: if isAdmin();
    }

    match /contact_submissions/{submissionId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
